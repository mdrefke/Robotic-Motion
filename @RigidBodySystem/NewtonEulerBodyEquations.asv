function eqn = NewtonEulerBodyEquations(system, q, qdot, qddot, B)
% Compute the Newton-Euler equations for a single rigid body. 
%
% @input B The Body object
% @input q The vector of joint positions
% @input qdot The vector of joint velocities
% @input qddot The vector of joint accelerations
%
% @output eqn A 6x1 vector `eqn` where `eqn=0` is satisfied when the
% equations of motion hold. For instance, to capture linear motion, the first
% three elements `eqn` are
%   eqn(1:3) = F - m*a (for appropriate F and a)
% where F is an applied force vector.  Similarly, the last three elements are
%   eqn(4:6) = M - I*alpha (for appropriate M and alpha)
% where M is an applied moment vector.

%% YOUR CODE HERE

% Implement the Newton-Euler equations for a single rigid body. You will 
% need to make use of a number of functions implemented in previous weeks,
% as well as the function you just finished called AppliedForcesAndMoments
% which will generate the net applied force and moment on the body for you.
% Be sure to work in the correct coordinates!

% Note: we encourage you think about what choice of coordinate basis will make
% these equations simplest to improve the performance of your code when used
% with symbolic variables.  For this reason, we ask you to use the following
% coordinate frames:
%  - For the translational dynamics, use the N frame, since this is an inertial
%    (i.e. non-accelerating) frame.
%  - For the angular dynamics, use the B frame, since the inertia tensor will
%    be constant in that frame.

% We suggest the following steps (which you can conveniently use as in-line
% comments for your lines of code):
% 1. Get the force and moment on the body due to applied forces and moments
% (hint: you'll implement a convenient function this week).

frame = system.GetInertialFrameN;
[F_B_N, M_Bcm_N] = AppliedForcesAndMoments(system.q,qdot,B);

% 2. Get the linear acceleration, angular velocity, and angular acceleration of
% B's CoM in N, expressed in N coordinates.
a_Bcm_N = PointAcceleration(system,q,qdot,qddot,B,B.r_Bo_Bcm,frame);
w_Bcm_N = BodyAngularVelocity(system,q,qdot,B,N);
alpha_Bcm_N = BodyAngularAcceleration

% 3. Convert the angular velocity and angular acceleration of B in N to B
% coordinates.

% 4. Compute the linear dynamics in N coordinates (F - ma).

% 5. Compute the rotational dynamics in B coordinates (M - I alpha).

% 6. Combine the linear and rotational dynamics into one output vector.
eqn = zeros(6,1); % replace me!

end