function handle = SystemInverseDynamics(system)
% Generates symbolic and numeric (function handle) forms of the inverse
% dynamics of a rigid body system.
%
% @input system The RigidBodySystem object
%
% @output inverseDynamics A function handle which describes the inverse dynamics
% numerically, in the form
%  u = inverseDynamics([q;qdot],qddot)
% where u is a vector of control inputs (actuator efforts) and q, qdot,
% qddot are the state and desired acceleration of the system. This function
% handle should return a value for u such that applying u to a system with
% current state [q;qdot] will produce the desired acceleration qddot.

n = numel(system.state_to_joint_index); % degrees of freedom


%% Create symbolic variables for the time, state, and accelerations
u = system.AggregateControlInputs();
q_sym = sym('q', [n,1], 'real');
qdot_sym = sym('qdot', [n,1], 'real');
qddot_sym = sym('qddot', [n,1], 'real');
%% Compute symbolic form of dynamics

[~, eom] = SymbolicSystemDynamics(system);

% Aggregate unknowns: both the accelerations and the reaction forces!
reactions = system.AggregateUnknownReactions();
unknowns = [u; reactions];

%% Solve the equations of motion for the inputs

[A,b] = equationsToMatrix(eom,unknowns);

A_ = matlabFunction(A,'Vars',{[q_sym ; qdot_sym]});
b_ = matlabFunction(b,'Vars',{[q_sym ; qdot_sym], qddot_sym});

%inverseDynamics = @(x,qddot) A_(x) \ b_(x,qddot);
handle = @(x,qddot)inverseDynamics(x,qddot,A_, b_);


  function [u, reactions] = inverseDynamics(x,qddot,A_,b_)
    % This function is used to generate ode45-compatible handles for the
    % numerical inverse dynamics.
    %
    % @input x The current state of the system, [q;qdot]
    % @input A_ A function handle in the form
    %     A = A_(x)
    % to generate the coefficient matrix for the linear system
    % @input b_ A function handle in the form
    %     b = b_(x,qddot)
    % to generate the vector for the linear system
    % @input qddot The current value of the desired acceleration
    %
    % @output u The current value of the control inputs
    % @output reactions A vector of all unknown reaction forces, which you
    % will solve for while computing the system's velocity and acceleration
    %
    % Note that A_ and b_ will be generated by the above code and then sent
    % to this function to create the function handle returned by
    % SymbolicSystemDynamics. As shown above, the dynamics can be written
    % as a linear system in the form
    %     A(x) * [u; reactions] = b(x,qddot)
    % which you will solve.

    %% MD's CODE:

    % Hint, similar to in SymbolicSystemDynamics, you will need to
    % determine the lengths of u and the reactions vectors.
    n_u = length(system.AggregateControlInputs()); % the number of control inputs
    vec = A_(x)\b_(x,qddot);
    u = vec(1:n_u);
    reactions = vec(n_u+1:end);
  end

end